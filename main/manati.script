function init(self)
	-- Inicializar variables
	msg.post(".", "acquire_input_focus")
	self.score = 0
	self.progress = 0
	self.scaling = false
	self.original_scale = vmath.vector3(1, 1, 1)
	self.target_scale = vmath.vector3(1.1, 1.1, 1)
	self.scale_duration = 0.2
	self.timer = 0

	-- Factory para objetos y efectos
	self.factory_url = msg.url("/FactoryGameObject#factory")
	self.plus_one_factory_url = msg.url("/PlusOneFcatoryGameObject#PlusOneFactory")
	self.spawn_x = 50
	self.spawn_step = 100

	self.sound_url = msg.url("#click_sound")
	self.wow_sound_url = msg.url("#wow_sound")
	
end


function final(self)
	-- Finalización del script si es necesario
end

function update(self, dt)
	-- Controla la animación de escalado
	if self.scaling then
		self.timer = self.timer - dt
		if self.timer <= 0 then
			self.scaling = false
			go.set_scale(self.original_scale)
		end
	end
end

function fixed_update(self, dt)
	-- Agregar lógica de actualización fija si es necesario
end

function on_message(self, message_id, message, sender)
	if message_id == hash("increment_points") then
		self.score = self.score + message.points
		print("Puntaje actualizado:", self.score)
		-- Opcional: Actualizar visualmente el puntaje
		msg.post("/score#text", "points_updated", { points = self.score })
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		if action.pressed then
			-- Incrementar el puntaje
			self.score = self.score + 1
			self.progress = self.progress + 10

			--actualizar gui progress
			if self.progress_acuario_url then
				msg.post(self.progress_acuario_url .. "#progress_gui", "increment_clicks")
				
			end
			print("Progress Acuario URL:", self.progress_acuario_url)
			
			
			-- Actualizar puntos en pantalla
			local params = { points = self.score }
			msg.post("/score#text", "points_updated", params)
			-- Actualitzar progressio del clicker
			--local progress = { progress = self.progress }
			--msg.post("/score#text", "progress_updated", progress)
			
			sound.play(self.sound_url)
			
			-- Animar el escalado del objeto principal
			go.set_scale(self.target_scale) -- Cambia la escala del nodo
			self.scaling = true -- Activa el estado de escalado
			self.timer = self.scale_duration

			-- Crear un GameObject cada 10 clics
			if self.score % 10 == 0 then
				local position = vmath.vector3(self.spawn_x, 50, 0)
				factory.create(self.factory_url, position)
				self.spawn_x = self.spawn_x + self.spawn_step
				sound.play(self.wow_sound_url)
				if self.progress >= 100 then
					self.progress = 0
				end
			end

			-- Generar una posición aleatoria cercana a la posición base
			local base_position = vmath.vector3(500, 270, 0) -- Posición base
			local random_offset_x = math.random(-200, 200)    -- Rango aleatorio en X (-20 a 20)
			local random_offset_y = math.random(-100, 300)    -- Rango aleatorio en Y (-10 a 30)
			local random_position = vmath.vector3(base_position.x + random_offset_x, base_position.y + random_offset_y, base_position.z)

			-- Crear el efecto "+1" en la posición aleatoria
			local plus_one_id = factory.create(self.plus_one_factory_url, random_position)

			-- Desplazar y desvanecer el "+1"
			go.animate(plus_one_id, "position.y", go.PLAYBACK_ONCE_FORWARD, random_position.y + 50, go.EASING_OUTSINE, 1)

			-- Eliminar el objeto "+1" después de 1 segundo
			timer.delay(1, false, function()
				go.delete(plus_one_id)
			end)
		end
	end
end


function on_reload(self)
	-- Manejar recarga si es necesario
end
